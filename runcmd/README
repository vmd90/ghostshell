
    Libruncmd is part of POSIX Exempli Gratia (POSIX by example)

    Copyright (c) 2015 Francisco Jose Monaco <monaco@icmc.usp.br>

    This is Free Open Source Software. For licensing, see COPYING

    POSIX-eg repository can be found at https://gitlab.com/monaco/posixeg


OVERVIEW
--------------------------------------------------

Libruncmd is a small C library providing some simple functionality specified in
the companion file runcmd.txt.  The file, resented as a man-page like document,
describes the library API.

The implementation of libruncmd supplied with POSIXeg is incomplete and is meant
as an skeleton to further be developed by the student as an exercise. The 
proposed work consists in completing the implementation to meet the 
specification.

Please, read the following instructions thoroughly before starting to work on
the exercise. There are some important rules and useful tips that you should
not miss.

DETAILED INSTRUCTIONS
--------------------------------------------------

First, please, go through libruncmd specification in runcmd.txt.

The file, formatted like a traditional man page, specify libruncmd API comprised
by a single function runcmd() and a set of macros. The library is implemented in
the source file runcmd.c and the header file runcmd.h.

The library can be built with the aid of the provided makefile script by issuing
the command line at the shell prompt

    $ make

The command shall build both the static and the shared versions of the library, 
libruncmd.a and libruncmd.so, respectively, as well as some executable programs
meant for testing the function runcmd.

You may execute the program test-runcmd directly at the command line. 
Alternatively, you may execute the tests by issuing

    $ make test


The test consists in several checks, all of them should report success. 

The provided implementation is incomplete and, therefore, some tests will fail.
Your task consists in finishing the library implementation so that it complies
with the man page (runcmd.txt)

Aside the rule to make the libraries and executable programs, the provide 
script Makefile offers also some other options, including

    $ make clean                delete the files that were generated by make
    $ make dist                 creates a tarball for distribution
    $ make distcheck            checks if distribution builds correctly
    $ make install              install the binaries, libraries and headers
    $ make uninstall            uninstall what install has installed

Please, refer to the file Makefile for other rules and further details.

To begin with the exercise you should follow the steps listed bellow. Please,
read the whole instructions before you start (there are some useful tips ahead).

  These directions assumes you are using a VCS (version control systems) 
  repository to keep control of our project.  It is also assumed that your have
  a working project named 'myproject' and that the runcmd exercise is a 
  subproject of your main project 'myproject'. 

1) Create a subdirectory runcmd within your project's main directory. 

   For instance if your project lies on <somepath>/myproject, create a
    runcmd directory <somepath>/myproject/runcmd

   $ cd <somepath>/myproject
   $ mkdir runcmd

2) Within your runcmd directory, put your implementation of libruncmd.

   Your implementation of libruncmd does not need to provide any executable
   program; only the library is needed. As for the review of your exercise,
   your library will be linked to the test programs provided by POSIXEg's
   runcmd project.  Therefore, make sure that your library can be linked
   against POSIXEeg's test programs and that the tests result successfully.

   You should not simple copy files from POSIXeg's libruncmd source code; you 
   are entitled to create your own inplementation of libruncmd.  You may, 
   however, to take advange POSIXeg's librucmd examples as reference.

   If you are going to resortto POSIXeg's runcmd example, these are he source 
   files you may be interested:

   runcmd.c  	 	the library source code
   runcmd.h		the library header

   You should also create and properly edit the following files

   README    	   	General overview of your project and directions for
   			building and installing the software. You should not
			simply copy POSIXeg runcmd's README; it's your own
			libruncmd implementation.  You, however, are welcome
			to make a reference to POSIXeg project.
			

   You will not need to copy the auxiliary files from POSIXeg's runcmd. You may
   optionally add your own test programs if you wish so, but this is not needed.
   Bear in mind that your libruncmd implementation are to be test against POSIXeg
   runcmd's check programs, not yours.

   Your implementation must use **exclusively** the standard C library (aka libc)
   and no other external library. This is part of the execise.

   The implementation must be adherent to standards ISO/ANSI/Standard C (c89/90)
   and POSIX (IEEE 1003.1-2008). The evaluation of the exercise will be performed
   by compiling your library with

   gcc -Wall -Werror --ansi --pedantic-errors -D_POSIX_C_SOURCE=200809L

   It is strongly recommended that you keep this flags on your own Makefile.
   Adherence to Standard C and POSIX is also part of the exercise's purpose.

3) Provide a Makefile to build libruncmd. Your makefile should have at least the
   the rules to perform the following tasks

   make	     		build the library, both in static and in shared forms
   make install		install the library in $(PREFIX)/lib and the headers
   			in $(PREFIX)/include (see note on PREFIX).
   make uninstall	uninstall what 'install' rule has installed
   make dist		pack source for distribution
   make distcheck	verify whether the distributed source can be correctly
   			built (i.e. it has all the needed files)

   You may create your own Makefile. Alternatively, you may use  POSIXeg's 
   Makefile bootstrap script to create a brand new Makefile for your project.
   Please, see posixeg/utils/Makefile for further information.

   Your implementation must be successfully built withot either errors or
   warnings during compilation.

   Please, make sure your 'make install' rule installs the software in the 
   proper place, as indicated by the makefile variable PREFIX:

   $(PREFIX)/lib     	       install the library here
   $(PREFIX)/include	       install the headers here

   This is particularly important because the review of your exercise implies
   in linking POSIXeg's test programs against your libruncmd implementation.
   The test cases will look for your library in $(PREFIX)/lib and 
   in $(PREFIX)/include.  If they are not there, the test will fail.

4) Upload your changes to the VCS repository.

   This exercise assume you are using a git repository named myproject and
   that your libruncmd implementation lies under directory 

   <myproject>/<runcmd>

   This exercise may be development in parts and it is possible that the
   evaluation process asks you to upload your changes 

   The development of this exercise may follow a schedule of partial evaluation.
   In this case, for every partial evaluation you will be requested to present
   your current implementation as a new 'release'. A release is a annotated in
   tag the main repository with a specified name.

   For the n-th partial evaluation, the release shall be identified by the tag

     part-nnn     

  where 'nnn' is a three-digit sequential integer starting from 001. For 
  instance, the partial evaluation 1, 2 and 3 are to be released under the tags
  part-001, part-002 and part-003, respectively.

  To make the release 1, you may use the following commands at your local git
  repository:

     $ git tag -a "part-001" -m "Some message"    (create the tag)
     $ git push origin part-001	      		  (upload the tag)

  Please consult Git documentation for further instructions on tagging.

  Make sure that the release complies with the requirements of every partial
  evaluation.  

HOW TO TEST YOUR IPLEMENTATION
--------------------------------------------------

POSIXeg repository has a test program: test-runcmd. Normally, the default
Makefile rule will build the test-runcm by linking it with the enclosed
libruncmd implementation offered as example. In order to run the test cases
agains your own libruncmd implementation, you may perform the following 
procedure.

Within your project's runcmd directory, build and install the library. 
For instance, if you want to install the library at /home/foo/local

   $ cd <somepath>/myproject/runcmd
   $ make 
   $ make PREFIX=/home/foo/local install

This shall install libruncmd in /home/foo/local/lib

Then, within POSIXeg's runcmd directory

   $ cd <otherpath>/posixeg/runcmd/exercises
   $ make clean
   $ make LDFLAGS="-L/home/foo/local/lib -Wl,-rpath=/home/foo/local/lib" \
          CPPFLAGS="-I/home/foo/local/include"

This will link test-runcmd against your library and set the runtime
limker path (rpath) to look the libraries in the correct location
when the binary is executed. 

Now if you run the test

  $ make test

the test program will test your library, not the library that
comes with POSIXeg.
   

REPOSITORY MANAGEMENT
--------------------------------------------------

You may manage your VCS repository in the usual way. Notice, however the 
following recommendations.

* Please, do not upload generated files to the main repository. These include
object code (*.o) binaries, libraries (*.a, *.so) and temporary files. As a rule
of thumb, if 'make' has produced the files, do not upload; only source should
go to the repository.

* Try not to commit broken implementation to the master branch of the main 
repository. This include buggy code or code that does not compile, as it may
cause troubles to your development teammates.  Instead, if you want to share 
some incomplete code in a separate branch. You may create a new branch by the
following steps

  $ git branch branch_name                             create a new branch
  $ git checkout branch_name                           move to the new branch

  do your editing

  $ git add <Changed files>                            add modified files
  $ git commit -m "Some meaningful message"            commit modification
  $ git push origin branch_name                        upload the branch

To checkout a specific branch from the repository

  $ git fetch branch_name                              fetch the remote branch
  $ git checkout branch_name                           move to the new branch

You may use this mechanism to share code for discussions with teammates and
others. Please, refer to Git documentation for further details.

* As a suggestion, before starting to work in a new issue, you may go through
the following workflow

  $ git pull                              make sure you have the newest changes
  $ git checkout -b some_tag              create a new local branch

  do your editings

  $ git add <modified files>              mark the files to be committed
  $ git commit -m "A meaningful message"  commit your changes to local branch
  $ git checkout master                   move to the master branch
  $ git merge some_tag                    apply your changes
  $ git push                              upload your changes

This may save you time if you later want to move back to the master branch
before committing your changes (or to get rid of bad ideas without compromising
your master branch).

ON COPYRIGHT
--------------------------------------------------

If you decide to reuse files from POSIXeg project, remember not to modify the 
copyright notice of the files you have copied from POSIXeg project, and to a 
note if you have modified them in any way. 

If you ever decide to reuse any files from POSIXeg project, remember to retain
the original copyright notes in them, and also to add complementary information
if you happen to modify the files in any way. Such a modification note can be
similar to this

   "This file has been modified by <Your Name> <your-email> as part of
    <Your-Project-Name> project."

For all other files you have created, please add a corresponding copyright 
note or your own. Such a copyright note may be, for instance, like those used
in original POSIXeg's runcmd project (replaced with your data).

POSIXeg's license allows your to distribute POSIXeg's source code (either in
its original or modified form) with your own software. This is a benefit from 
POSIXeg's free software license.  Please, read this license terms and make
sure the license you choose for your project complies with the requirement's
or POSIXeg's license (i.e. you must use a free software, GPL-compatible 
license). For instance, you may use the same license (GPL).

If you enjoy the fact that you can inspect, study and even reuse code from
POSIXeg, you are strongly encouraged to consider a free software license for
your projects.

POSIXeg CHANGES AND UPDATES
--------------------------------------------------

Eventual changes in POSIXeg such as bug fixes and other improvements may affect
the test programs against which your libruncmd implementation will be evaluated.

Therefore, your are urged to keep an eye on POSIXeg updates during the whole
course of development of your exercise by monitoring the POSIXeg repository at

    https://gitlab.com/monaco/posixeg

You are also strongly encouraged to report bugs and suggest improvements by 
emailing the author at moanco@icmc.usp.br


